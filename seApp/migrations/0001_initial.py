# Generated by Django 4.2.7 on 2025-03-21 19:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('user', 'User'), ('faculty', 'Faculty'), ('admin', 'Admin')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('department', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_initial', models.CharField(blank=True, max_length=1, null=True)),
                ('college_department', models.CharField(max_length=100)),
                ('birthday', models.DateField()),
                ('gender', models.CharField(max_length=10)),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('bmi', models.FloatField(default=0)),
                ('body_type', models.CharField(max_length=20)),
                ('activity_level', models.CharField(max_length=20)),
                ('equipment_access', models.TextField()),
                ('health_condition', models.TextField()),
                ('allergies', models.TextField()),
                ('injuries', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExercisePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength_exercises', models.TextField()),
                ('flexibility_exercises', models.TextField()),
                ('cardio_exercises', models.TextField()),
                ('routine', models.JSONField()),
                ('rest_day', models.CharField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='E_PlanApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=20)),
                ('review_comments', models.TextField(blank=True, null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('E_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seApp.exerciseplan')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seApp.faculty')),
            ],
        ),
        migrations.CreateModel(
            name='DietPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calorie_intake_per_day', models.IntegerField()),
                ('fats_per_meal', models.FloatField()),
                ('carbs_per_meal', models.FloatField()),
                ('protein_per_meal', models.FloatField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='D_PlanApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=20)),
                ('review_comments', models.TextField(blank=True, null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('D_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seApp.dietplan')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seApp.faculty')),
            ],
        ),
        migrations.AddIndex(
            model_name='exerciseplan',
            index=models.Index(fields=['user', 'status'], name='seApp_exerc_user_id_289c68_idx'),
        ),
        migrations.AddIndex(
            model_name='dietplan',
            index=models.Index(fields=['user', 'status'], name='seApp_dietp_user_id_2589e0_idx'),
        ),
    ]
